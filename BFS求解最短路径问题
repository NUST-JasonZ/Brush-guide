思路：
  首先绘制图，然后使用,使用优先队列，先把起始元素放入队列中，再构造一个集合用于获取元素是否已经被使用，弹出队首元素开始遍历，最短
  路径先压入队列。

代码：
import heapq
import math
graph = {
    "A": {"B": 5, "C": 1},
    "B": {"A": 5, "C": 2, "D": 1},
    "C": {"A": 1, "B": 2, "D": 4, "E": 8},
    "D": {"B": 1, "C": 4, "E": 3, "F": 6},
    "E": {"C": 8, "D": 3},
    "F": {"D": 6}
}

def init_ditance(graph, s):
    distance = {s: 0}
    for vertex in graph:
        if vertex != s:
            distance[vertex] = math.inf
    return distance

def dijkstra(graph, s):
    pqueue = []  # 优先队列
    heapq.heappush(pqueue, (0, s))
    seen = set()
    parent = {s: None}  # 最短距离下某个元素的上一个节点
    distance = init_ditance(graph, s)  # s到某个元素的最短距离
    while len(pqueue) > 0:
        pair = heapq.heappop(pqueue)  # (_,_)
        dist = pair[0]
        vertex = pair[1]
        seen.add(vertex)
        nodes = graph[vertex].keys()
        for w in nodes:
            if w not in seen:
                if dist + graph[vertex][w] < distance[w]:
                    heapq.heappush(pqueue, (dist + graph[vertex][w], w))
                    parent[w] = vertex
                    distance[w] = dist + graph[vertex][w]
    return parent, distance


parent, distance = dijkstra(graph, 'A')
print(parent)
print(distance)
